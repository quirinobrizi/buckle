"use strict";
// These tests are not run, they are only here to verify typings.
Object.defineProperty(exports, "__esModule", { value: true });
//import awilix definitions
const index_1 = require("../index");
/**
 * Test class for container.
 * @class TestClass
 */
class TestClass {
    constructor(s, n) { }
    stuff(str) { }
}
/**
 * Test function for container.
 * @function testFunction
 */
function testFunction(str) { }
/**
 * Test value for container.
 */
const VALUE = 'foo';
const container = index_1.createContainer();
const scope = container.createScope();
container.register({
    testClass: index_1.asClass(TestClass).inject(container => ({ value: 42 })),
    testClass2: index_1.asClass(TestClass),
    testFunction: index_1.asFunction(testFunction),
    testValue: index_1.asValue(VALUE)
});
container.cradle.testClass;
container.cradle.testFunction;
container.cradle.testValue;
container.registrations[0].resolve;
container.registrations[0].lifetime;
container.register('_testClass', index_1.asClass(TestClass));
const testClass = container.resolve('_testClass');
testClass.stuff("Hello");
const testFunc = container.resolve('_testFunction');
testFunc("");
const testFunc2 = container.resolve('_testFunction');
testFunc2("");
container.register('_testValue', index_1.asValue(VALUE));
container.registerClass(TestClass);
container.registerClass('__testClass', TestClass);
container.registerClass('__testClass', TestClass);
container.registerClass('__testClass', TestClass, { lifetime: index_1.Lifetime.SCOPED });
container.registerClass('__testClass', [TestClass, { lifetime: index_1.Lifetime.SCOPED }]);
container.registerClass({
    __testClass: TestClass,
    __testClass2: [TestClass, {}]
});
container.registerFunction(testFunction, { lifetime: index_1.Lifetime.SCOPED });
container.registerFunction('__testClass', testFunction);
container.registerFunction('__testClass', testFunction, { resolutionMode: index_1.ResolutionMode.CLASSIC });
container.registerFunction('__testClass', [testFunction, { resolutionMode: index_1.ResolutionMode.CLASSIC }]);
container.registerFunction({
    __testFunction: testFunction,
    __testFunction2: [testFunction, { injector: (c) => ({ hehe: 42 }) }]
});
container.registerValue({
    __testValue: VALUE
});
container.loadModules(['*.js'], {
    formatName: (name, descriptor) => descriptor.path
});
container.loadModules([
    ['hello.js', { lifetime: index_1.Lifetime.SCOPED, register: index_1.asClass }],
    ['world.js', { injector: (c) => ({ hah: 123 }) }]
], {
    registrationOptions: {
        register: index_1.asFunction,
        lifetime: index_1.Lifetime.SCOPED
    }
});
index_1.listModules('');
index_1.listModules(['']);
index_1.listModules([
    ['hello.js', { lifetime: index_1.Lifetime.SCOPED }]
]);
