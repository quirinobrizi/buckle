/*******************************************************************************
 * Copyright [2017] [Quirino Brizi (quirino.brizi@gmail.com)]
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/'use strict';var cov_1kie1i8025=function(){var path='/home/quirino/Projects/buckle/src/infrastructure/ai/anomaly/AnomalyAnalyzer.js',hash='d8b40a5eaef75f832efcff584188b423f40dc9e8',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/quirino/Projects/buckle/src/infrastructure/ai/anomaly/AnomalyAnalyzer.js',statementMap:{'0':{start:{line:19,column:20},end:{line:19,column:55}},'1':{start:{line:21,column:23},end:{line:21,column:50}},'2':{start:{line:22,column:18},end:{line:22,column:40}},'3':{start:{line:23,column:14},end:{line:23,column:32}},'4':{start:{line:24,column:15},end:{line:24,column:38}},'5':{start:{line:26,column:0},end:{line:61,column:2}},'6':{start:{line:30,column:4},end:{line:30,column:51}},'7':{start:{line:32,column:4},end:{line:32,column:69}},'8':{start:{line:33,column:4},end:{line:33,column:71}},'9':{start:{line:34,column:4},end:{line:34,column:65}},'10':{start:{line:35,column:4},end:{line:35,column:93}},'11':{start:{line:36,column:4},end:{line:36,column:99}},'12':{start:{line:37,column:4},end:{line:37,column:79}},'13':{start:{line:38,column:4},end:{line:38,column:79}},'14':{start:{line:39,column:4},end:{line:39,column:85}},'15':{start:{line:40,column:4},end:{line:40,column:93}},'16':{start:{line:41,column:4},end:{line:41,column:101}},'17':{start:{line:43,column:4},end:{line:43,column:108}},'18':{start:{line:44,column:4},end:{line:44,column:108}},'19':{start:{line:45,column:4},end:{line:45,column:100}},'20':{start:{line:47,column:4},end:{line:51,column:7}},'21':{start:{line:48,column:6},end:{line:50,column:7}},'22':{start:{line:49,column:8},end:{line:49,column:123}},'23':{start:{line:55,column:15},end:{line:55,column:19}},'24':{start:{line:56,column:4},end:{line:56,column:54}},'25':{start:{line:57,column:4},end:{line:59,column:7}},'26':{start:{line:58,column:6},end:{line:58,column:65}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:16},end:{line:52,column:3}},line:28},'1':{name:'(anonymous_1)',decl:{start:{line:47,column:34},end:{line:47,column:35}},loc:{start:{line:47,column:66},end:{line:51,column:5}},line:47},'2':{name:'(anonymous_2)',decl:{start:{line:54,column:2},end:{line:54,column:3}},loc:{start:{line:54,column:21},end:{line:60,column:3}},line:54},'3':{name:'(anonymous_3)',decl:{start:{line:57,column:23},end:{line:57,column:24}},loc:{start:{line:57,column:44},end:{line:59,column:5}},line:57}},branchMap:{'0':{loc:{start:{line:48,column:6},end:{line:50,column:7}},type:'if',locations:[{start:{line:48,column:6},end:{line:50,column:7}},{start:{line:48,column:6},end:{line:50,column:7}}],line:48}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0},f:{'0':0,'1':0,'2':0,'3':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const RulesEngine=(cov_1kie1i8025.s[0]++,require('json-rules-engine').Engine);const factsExtractor=(cov_1kie1i8025.s[1]++,require('./FactsExtractor'));const operators=(cov_1kie1i8025.s[2]++,require('./Operators'));const rules=(cov_1kie1i8025.s[3]++,require('./Rules'));const logger=(cov_1kie1i8025.s[4]++,require('../../Logger'));cov_1kie1i8025.s[5]++;module.exports=class AnomalyAnalyzer{constructor(){cov_1kie1i8025.f[0]++;cov_1kie1i8025.s[6]++;this.ruleEngine=new RulesEngine(rules.get());cov_1kie1i8025.s[7]++;this.ruleEngine.addFact('hostConfig',factsExtractor.hostConfig);cov_1kie1i8025.s[8]++;this.ruleEngine.addFact('memoryStats',factsExtractor.memoryStats);cov_1kie1i8025.s[9]++;this.ruleEngine.addFact('cpuStats',factsExtractor.cpuStats);cov_1kie1i8025.s[10]++;this.ruleEngine.addFact('lastCpuUsagePercentage',factsExtractor.lastCpuUsagePercentage);cov_1kie1i8025.s[11]++;this.ruleEngine.addFact('currentCpuUsagePercentage',factsExtractor.currentCpuUsagePercentage);cov_1kie1i8025.s[12]++;this.ruleEngine.addFact('currentCpuLimit',factsExtractor.currentCpuLimit);cov_1kie1i8025.s[13]++;this.ruleEngine.addFact('lastMemoryUsage',factsExtractor.lastMemoryUsage);cov_1kie1i8025.s[14]++;this.ruleEngine.addFact('currentMemoryLimit',factsExtractor.currentMemoryLimit);cov_1kie1i8025.s[15]++;this.ruleEngine.addFact('secondsSinceLastUpdate',factsExtractor.secondsSinceLastUpdate);cov_1kie1i8025.s[16]++;this.ruleEngine.addFact('isRunningForAtLeastMinutes',factsExtractor.isRunningForAtLeastMinutes);cov_1kie1i8025.s[17]++;this.ruleEngine.addOperator('differenceGreaterThan25Percent',operators.differenceGreaterThan25Percent);cov_1kie1i8025.s[18]++;this.ruleEngine.addOperator('differenceGreaterThan15Percent',operators.differenceGreaterThan15Percent);cov_1kie1i8025.s[19]++;this.ruleEngine.addOperator('differenceLessThan5Percent',operators.differenceLessThan5Percent);cov_1kie1i8025.s[20]++;this.ruleEngine.on('failure',(event,almanac,ruleResult)=>{cov_1kie1i8025.f[1]++;cov_1kie1i8025.s[21]++;if(logger.debug){cov_1kie1i8025.b[0][0]++;cov_1kie1i8025.s[22]++;logger.debug("rule evaluation failed: almanac %s, result %s",JSON.stringify(almanac),JSON.stringify(ruleResult));}else{cov_1kie1i8025.b[0][1]++;}});}analyze(container){cov_1kie1i8025.f[2]++;var self=(cov_1kie1i8025.s[23]++,this);cov_1kie1i8025.s[24]++;logger.debug("analyzing container %s",container);cov_1kie1i8025.s[25]++;return new Promise((resolve,reject)=>{cov_1kie1i8025.f[3]++;cov_1kie1i8025.s[26]++;self.ruleEngine.run(container).then(resolve).catch(reject);});}};