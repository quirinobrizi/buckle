/*******************************************************************************
 * Copyright [2017] [Quirino Brizi (quirino.brizi@gmail.com)]
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/'use strict';var cov_1i4102bv7=function(){var path='/home/quirino/Projects/buckle/src/domain/model/Node.js',hash='50e0b8ee4454bc384b67fa567e56b17c2b3ce318',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/quirino/Projects/buckle/src/domain/model/Node.js',statementMap:{'0':{start:{line:19,column:15},end:{line:19,column:53}},'1':{start:{line:20,column:22},end:{line:20,column:74}},'2':{start:{line:22,column:0},end:{line:244,column:2}},'3':{start:{line:24,column:8},end:{line:24,column:21}},'4':{start:{line:25,column:8},end:{line:25,column:25}},'5':{start:{line:26,column:8},end:{line:26,column:36}},'6':{start:{line:35,column:8},end:{line:35,column:23}},'7':{start:{line:45,column:8},end:{line:47,column:9}},'8':{start:{line:46,column:12},end:{line:46,column:25}},'9':{start:{line:48,column:8},end:{line:48,column:20}},'10':{start:{line:57,column:8},end:{line:57,column:23}},'11':{start:{line:67,column:8},end:{line:69,column:9}},'12':{start:{line:68,column:12},end:{line:68,column:35}},'13':{start:{line:70,column:8},end:{line:70,column:20}},'14':{start:{line:79,column:8},end:{line:79,column:28}},'15':{start:{line:88,column:8},end:{line:88,column:25}},'16':{start:{line:98,column:8},end:{line:100,column:9}},'17':{start:{line:99,column:12},end:{line:99,column:43}},'18':{start:{line:101,column:8},end:{line:101,column:20}},'19':{start:{line:110,column:8},end:{line:110,column:32}},'20':{start:{line:119,column:8},end:{line:121,column:9}},'21':{start:{line:120,column:12},end:{line:120,column:33}},'22':{start:{line:122,column:8},end:{line:122,column:20}},'23':{start:{line:131,column:8},end:{line:131,column:27}},'24':{start:{line:141,column:8},end:{line:141,column:40}},'25':{start:{line:151,column:8},end:{line:151,column:40}},'26':{start:{line:160,column:8},end:{line:160,column:31}},'27':{start:{line:173,column:8},end:{line:173,column:98}},'28':{start:{line:175,column:21},end:{line:175,column:23}},'29':{start:{line:177,column:26},end:{line:177,column:102}},'30':{start:{line:178,column:30},end:{line:178,column:66}},'31':{start:{line:179,column:27},end:{line:179,column:36}},'32':{start:{line:180,column:31},end:{line:180,column:33}},'33':{start:{line:181,column:24},end:{line:181,column:25}},'34':{start:{line:182,column:27},end:{line:182,column:28}},'35':{start:{line:184,column:8},end:{line:184,column:127}},'36':{start:{line:185,column:8},end:{line:211,column:9}},'37':{start:{line:186,column:28},end:{line:186,column:41}},'38':{start:{line:187,column:27},end:{line:187,column:64}},'39':{start:{line:188,column:30},end:{line:188,column:65}},'40':{start:{line:190,column:35},end:{line:190,column:57}},'41':{start:{line:191,column:38},end:{line:191,column:66}},'42':{start:{line:192,column:12},end:{line:192,column:132}},'43':{start:{line:194,column:12},end:{line:197,column:13}},'44':{start:{line:195,column:16},end:{line:195,column:113}},'45':{start:{line:196,column:16},end:{line:196,column:49}},'46':{start:{line:198,column:12},end:{line:200,column:13}},'47':{start:{line:199,column:16},end:{line:199,column:46}},'48':{start:{line:201,column:12},end:{line:203,column:13}},'49':{start:{line:202,column:16},end:{line:202,column:52}},'50':{start:{line:205,column:12},end:{line:210,column:15}},'51':{start:{line:213,column:8},end:{line:240,column:9}},'52':{start:{line:214,column:28},end:{line:214,column:47}},'53':{start:{line:215,column:30},end:{line:215,column:57}},'54':{start:{line:216,column:12},end:{line:216,column:128}},'55':{start:{line:217,column:12},end:{line:228,column:13}},'56':{start:{line:218,column:16},end:{line:218,column:67}},'57':{start:{line:219,column:16},end:{line:227,column:17}},'58':{start:{line:220,column:20},end:{line:220,column:55}},'59':{start:{line:223,column:39},end:{line:223,column:72}},'60':{start:{line:224,column:20},end:{line:224,column:92}},'61':{start:{line:225,column:20},end:{line:225,column:57}},'62':{start:{line:226,column:20},end:{line:226,column:34}},'63':{start:{line:229,column:12},end:{line:239,column:13}},'64':{start:{line:230,column:16},end:{line:238,column:17}},'65':{start:{line:231,column:20},end:{line:231,column:61}},'66':{start:{line:234,column:42},end:{line:234,column:81}},'67':{start:{line:235,column:20},end:{line:235,column:104}},'68':{start:{line:236,column:20},end:{line:236,column:63}},'69':{start:{line:237,column:20},end:{line:237,column:37}},'70':{start:{line:241,column:8},end:{line:241,column:28}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:23,column:4},end:{line:23,column:5}},loc:{start:{line:23,column:26},end:{line:27,column:5}},line:23},'1':{name:'(anonymous_1)',decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:12},end:{line:36,column:5}},line:34},'2':{name:'(anonymous_2)',decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:14},end:{line:49,column:5}},line:44},'3':{name:'(anonymous_3)',decl:{start:{line:56,column:4},end:{line:56,column:5}},loc:{start:{line:56,column:12},end:{line:58,column:5}},line:56},'4':{name:'(anonymous_4)',decl:{start:{line:66,column:4},end:{line:66,column:5}},loc:{start:{line:66,column:30},end:{line:71,column:5}},line:66},'5':{name:'(anonymous_5)',decl:{start:{line:78,column:4},end:{line:78,column:5}},loc:{start:{line:78,column:23},end:{line:80,column:5}},line:78},'6':{name:'(anonymous_6)',decl:{start:{line:87,column:4},end:{line:87,column:5}},loc:{start:{line:87,column:14},end:{line:89,column:5}},line:87},'7':{name:'(anonymous_7)',decl:{start:{line:97,column:4},end:{line:97,column:5}},loc:{start:{line:97,column:32},end:{line:102,column:5}},line:97},'8':{name:'(anonymous_8)',decl:{start:{line:109,column:4},end:{line:109,column:5}},loc:{start:{line:109,column:21},end:{line:111,column:5}},line:109},'9':{name:'(anonymous_9)',decl:{start:{line:118,column:4},end:{line:118,column:5}},loc:{start:{line:118,column:22},end:{line:123,column:5}},line:118},'10':{name:'(anonymous_10)',decl:{start:{line:130,column:4},end:{line:130,column:5}},loc:{start:{line:130,column:16},end:{line:132,column:5}},line:130},'11':{name:'(anonymous_11)',decl:{start:{line:140,column:4},end:{line:140,column:5}},loc:{start:{line:140,column:28},end:{line:142,column:5}},line:140},'12':{name:'(anonymous_12)',decl:{start:{line:150,column:4},end:{line:150,column:5}},loc:{start:{line:150,column:21},end:{line:152,column:5}},line:150},'13':{name:'(anonymous_13)',decl:{start:{line:159,column:4},end:{line:159,column:5}},loc:{start:{line:159,column:20},end:{line:161,column:5}},line:159},'14':{name:'(anonymous_14)',decl:{start:{line:172,column:4},end:{line:172,column:5}},loc:{start:{line:172,column:42},end:{line:242,column:5}},line:172}},branchMap:{'0':{loc:{start:{line:45,column:8},end:{line:47,column:9}},type:'if',locations:[{start:{line:45,column:8},end:{line:47,column:9}},{start:{line:45,column:8},end:{line:47,column:9}}],line:45},'1':{loc:{start:{line:67,column:8},end:{line:69,column:9}},type:'if',locations:[{start:{line:67,column:8},end:{line:69,column:9}},{start:{line:67,column:8},end:{line:69,column:9}}],line:67},'2':{loc:{start:{line:98,column:8},end:{line:100,column:9}},type:'if',locations:[{start:{line:98,column:8},end:{line:100,column:9}},{start:{line:98,column:8},end:{line:100,column:9}}],line:98},'3':{loc:{start:{line:119,column:8},end:{line:121,column:9}},type:'if',locations:[{start:{line:119,column:8},end:{line:121,column:9}},{start:{line:119,column:8},end:{line:121,column:9}}],line:119},'4':{loc:{start:{line:194,column:12},end:{line:197,column:13}},type:'if',locations:[{start:{line:194,column:12},end:{line:197,column:13}},{start:{line:194,column:12},end:{line:197,column:13}}],line:194},'5':{loc:{start:{line:194,column:15},end:{line:194,column:62}},type:'binary-expr',locations:[{start:{line:194,column:15},end:{line:194,column:35}},{start:{line:194,column:39},end:{line:194,column:62}}],line:194},'6':{loc:{start:{line:198,column:12},end:{line:200,column:13}},type:'if',locations:[{start:{line:198,column:12},end:{line:200,column:13}},{start:{line:198,column:12},end:{line:200,column:13}}],line:198},'7':{loc:{start:{line:201,column:12},end:{line:203,column:13}},type:'if',locations:[{start:{line:201,column:12},end:{line:203,column:13}},{start:{line:201,column:12},end:{line:203,column:13}}],line:201},'8':{loc:{start:{line:207,column:24},end:{line:207,column:84}},type:'cond-expr',locations:[{start:{line:207,column:51},end:{line:207,column:62}},{start:{line:207,column:65},end:{line:207,column:84}}],line:207},'9':{loc:{start:{line:217,column:12},end:{line:228,column:13}},type:'if',locations:[{start:{line:217,column:12},end:{line:228,column:13}},{start:{line:217,column:12},end:{line:228,column:13}}],line:217},'10':{loc:{start:{line:219,column:16},end:{line:227,column:17}},type:'if',locations:[{start:{line:219,column:16},end:{line:227,column:17}},{start:{line:219,column:16},end:{line:227,column:17}}],line:219},'11':{loc:{start:{line:229,column:12},end:{line:239,column:13}},type:'if',locations:[{start:{line:229,column:12},end:{line:239,column:13}},{start:{line:229,column:12},end:{line:239,column:13}}],line:229},'12':{loc:{start:{line:230,column:16},end:{line:238,column:17}},type:'if',locations:[{start:{line:230,column:16},end:{line:238,column:17}},{start:{line:230,column:16},end:{line:238,column:17}}],line:230}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0,'55':0,'56':0,'57':0,'58':0,'59':0,'60':0,'61':0,'62':0,'63':0,'64':0,'65':0,'66':0,'67':0,'68':0,'69':0,'70':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0],'7':[0,0],'8':[0,0],'9':[0,0],'10':[0,0],'11':[0,0],'12':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const logger=(cov_1i4102bv7.s[0]++,require('../../infrastructure/Logger'));const metricsHelper=(cov_1i4102bv7.s[1]++,require('../../infrastructure/helper/MetricsHelper'));cov_1i4102bv7.s[2]++;module.exports=class Node{constructor(id,name){cov_1i4102bv7.f[0]++;cov_1i4102bv7.s[3]++;this.id=id;cov_1i4102bv7.s[4]++;this.name=name;cov_1i4102bv7.s[5]++;this.properties=new Map();}/**
     * Retrieves the identifier of this node
     * @method getId
     * @return {string} the node identifier
     */getId(){cov_1i4102bv7.f[1]++;cov_1i4102bv7.s[6]++;return this.id;}/**
     * Set the node IP Address in a fluent mode
     * @method setIp
     * @param  {string} ip the IP address
     * @return {Node} this node
     */setIp(ip){cov_1i4102bv7.f[2]++;cov_1i4102bv7.s[7]++;if(!this.ip){cov_1i4102bv7.b[0][0]++;cov_1i4102bv7.s[8]++;this.ip=ip;}else{cov_1i4102bv7.b[0][1]++;}cov_1i4102bv7.s[9]++;return this;}/**
     * Retrieve the IP Address
     * @method getIp
     * @return {string} the node IP Address
     */getIp(){cov_1i4102bv7.f[3]++;cov_1i4102bv7.s[10]++;return this.ip;}/**
     * Allow to set the combination IP:PORT of the docker deamon running on this node.
     * @method setAddress
     * @param  {string}   address the combination IP:PORT.
     * @return {Node} this node
     */setDaemonAddress(address){cov_1i4102bv7.f[4]++;cov_1i4102bv7.s[11]++;if(!this.address){cov_1i4102bv7.b[1][0]++;cov_1i4102bv7.s[12]++;this.address=address;}else{cov_1i4102bv7.b[1][1]++;}cov_1i4102bv7.s[13]++;return this;}/**
     * Retrieve the combonation IP:PORT of the docker daemon running on this host
     * @method getDaemonAddress
     * @return {string}   address the combination IP:PORT.
     */getDaemonAddress(){cov_1i4102bv7.f[5]++;cov_1i4102bv7.s[14]++;return this.address;}/**
     * Allow retrieve this node name
     * @method getName
     * @return {string} this node name
     */getName(){cov_1i4102bv7.f[6]++;cov_1i4102bv7.s[15]++;return this.name;}/**
     * Set the number of CPU available on this node.
     * @method setNumberOfCpu
     * @param  {number}       numberOfCpu the number of CPU
     * @return {Node} this node
     */setNumberOfCpu(numberOfCpu){cov_1i4102bv7.f[7]++;cov_1i4102bv7.s[16]++;if(!this.numberOfCpu){cov_1i4102bv7.b[2][0]++;cov_1i4102bv7.s[17]++;this.numberOfCpu=numberOfCpu;}else{cov_1i4102bv7.b[2][1]++;}cov_1i4102bv7.s[18]++;return this;}/**
     * Retrive the number of CPU available on this node.
     * @method getNumberOfCpu
     * @return {number}       numberOfCpu the number of CPU
     */getNumberOfCpu(){cov_1i4102bv7.f[8]++;cov_1i4102bv7.s[19]++;return this.numberOfCpu;}/**
     * Set the memory, expressed in byte, available on this node.
     * @method setMemory
     * @param  {number}  memory the memory available on this node
     */setMemory(memory){cov_1i4102bv7.f[9]++;cov_1i4102bv7.s[20]++;if(!this.memory){cov_1i4102bv7.b[3][0]++;cov_1i4102bv7.s[21]++;this.memory=memory;}else{cov_1i4102bv7.b[3][1]++;}cov_1i4102bv7.s[22]++;return this;}/**
     * Retrive the memory, expressed in byte, available on this node
     * @method getMemory
     * @return {number}  memory the memory available on this node
     */getMemory(){cov_1i4102bv7.f[10]++;cov_1i4102bv7.s[23]++;return this.memory;}/**
     * Allow to add generic properties to this node.
     * @method addProperty
     * @param  {string}    key   the property name
     * @param  {Any}       value the property value
     */addProperty(key,value){cov_1i4102bv7.f[11]++;cov_1i4102bv7.s[24]++;this.properties.set(key,value);}/**
     * Allow to retrieve a specific property of this node
     * @method getProperty
     * @param  {string}    key the property key
     * @return {Any}        The property value
     */getProperty(key){cov_1i4102bv7.f[12]++;cov_1i4102bv7.s[25]++;return this.properties.get(key);}/**
     * Allow to retieve all properties defined for this node
     * @method getProperties
     * @return {Map}      the properties of this host
     */getProperties(){cov_1i4102bv7.f[13]++;cov_1i4102bv7.s[26]++;return this.properties;}/**
     * Distribute this container resources to all containers deployed
     * on this node. The distribution is done heuristically meaning that
     * the resources are assigned as best as possible without search for the
     * absolute optimum.
     * @method distributeResources
     * @param {Array<Container>}       containers the containers the resources need to be distributed to
     * @return {Map}                 the updated containers
     */async distributeResources(containers){cov_1i4102bv7.f[14]++;cov_1i4102bv7.s[27]++;logger.info("found %s containers deployed on node %s",containers.length,this.getName());var answer=(cov_1i4102bv7.s[28]++,[]);let maxCpuQuota=(cov_1i4102bv7.s[29]++,this.getNumberOfCpu()*metricsHelper.ONE_SEC_IN_JIFFY/containers.length);let maxMemoryQuota=(cov_1i4102bv7.s[30]++,this.getMemory()/containers.length);let requirements=(cov_1i4102bv7.s[31]++,new Map());let excessRequiredBy=(cov_1i4102bv7.s[32]++,[]);let cpuExcess=(cov_1i4102bv7.s[33]++,0);let memoryExcess=(cov_1i4102bv7.s[34]++,0);cov_1i4102bv7.s[35]++;logger.info("Node %s has available container quotas CPU: %s, Memory: %s",this.getName(),maxCpuQuota,maxMemoryQuota);cov_1i4102bv7.s[36]++;for(let i=0;i<containers.length;i++){let container=(cov_1i4102bv7.s[37]++,containers[i]);let cpuQuota=(cov_1i4102bv7.s[38]++,container.calculateRequiredCpuQuota());let memoryQuota=(cov_1i4102bv7.s[39]++,container.calculateRequiredMemory());let currentCpuExcess=(cov_1i4102bv7.s[40]++,maxCpuQuota-cpuQuota);let currentMemoryExcess=(cov_1i4102bv7.s[41]++,maxMemoryQuota-memoryQuota);cov_1i4102bv7.s[42]++;logger.info("Excess for container %s, CPU: %s, memory: %s",container.getName(),currentCpuExcess,currentMemoryExcess);cov_1i4102bv7.s[43]++;if((cov_1i4102bv7.b[5][0]++,currentCpuExcess<0)||(cov_1i4102bv7.b[5][1]++,currentMemoryExcess<0)){cov_1i4102bv7.b[4][0]++;cov_1i4102bv7.s[44]++;logger.info("container %s requires resources from above the standard qouta",container.getName());cov_1i4102bv7.s[45]++;excessRequiredBy.push(container);}else{cov_1i4102bv7.b[4][1]++;};cov_1i4102bv7.s[46]++;if(currentCpuExcess>0){cov_1i4102bv7.b[6][0]++;cov_1i4102bv7.s[47]++;cpuExcess+=currentCpuExcess;}else{cov_1i4102bv7.b[6][1]++;}cov_1i4102bv7.s[48]++;if(currentMemoryExcess>0){cov_1i4102bv7.b[7][0]++;cov_1i4102bv7.s[49]++;memoryExcess+=currentMemoryExcess;}else{cov_1i4102bv7.b[7][1]++;}cov_1i4102bv7.s[50]++;requirements.set(container,{cpu:cpuQuota,memory:currentMemoryExcess>=0?(cov_1i4102bv7.b[8][0]++,memoryQuota):(cov_1i4102bv7.b[8][1]++,currentMemoryExcess),cpuExcess:currentCpuExcess,memoryExcess:currentMemoryExcess});}cov_1i4102bv7.s[51]++;for(let i=0;i<excessRequiredBy.length;i++){let container=(cov_1i4102bv7.s[52]++,excessRequiredBy[i]);let requirement=(cov_1i4102bv7.s[53]++,requirements.get(container));cov_1i4102bv7.s[54]++;logger.info("container %s requires, CPU: %s, Memory: %s",container.getName(),requirement.cpu,requirement.memory);cov_1i4102bv7.s[55]++;if(requirement.cpuExcess<0){cov_1i4102bv7.b[9][0]++;cov_1i4102bv7.s[56]++;logger.info("available cpu excess: %s",cpuExcess);cov_1i4102bv7.s[57]++;if(Math.abs(requirement.cpuExcess)<cpuExcess){cov_1i4102bv7.b[10][0]++;cov_1i4102bv7.s[58]++;cpuExcess+=requirement.cpuExcess;}else{cov_1i4102bv7.b[10][1]++;// requirement.cpuExcess is negative...
let newCpuExcess=(cov_1i4102bv7.s[59]++,requirement.cpuExcess+cpuExcess);cov_1i4102bv7.s[60]++;requirement.cpu=requirement.cpu+requirement.cpuExcess+cpuExcess;cov_1i4102bv7.s[61]++;requirement.cpuExcess=newCpuExcess;cov_1i4102bv7.s[62]++;cpuExcess=0;}}else{cov_1i4102bv7.b[9][1]++;}cov_1i4102bv7.s[63]++;if(requirement.memoryExcess<0){cov_1i4102bv7.b[11][0]++;cov_1i4102bv7.s[64]++;if(Math.abs(requirement.memoryExcess)<memoryExcess){cov_1i4102bv7.b[12][0]++;cov_1i4102bv7.s[65]++;memoryExcess+=requirement.memoryExcess;}else{cov_1i4102bv7.b[12][1]++;// requirement.memoryExcess is negative...
let newMemoryExcess=(cov_1i4102bv7.s[66]++,requirement.memoryExcess+memoryExcess);cov_1i4102bv7.s[67]++;requirement.memory=requirement.memory+requirement.memoryExcess+memoryExcess;cov_1i4102bv7.s[68]++;requirement.memoryExcess=newMemoryExcess;cov_1i4102bv7.s[69]++;memoryExcess=0;}}else{cov_1i4102bv7.b[11][1]++;}}cov_1i4102bv7.s[70]++;return requirements;}};